<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.academix.mapper.ChatMapper">


  <!-- 1:1 채팅방 여부 확인 -->
  <select id="isOneToOneChatroomExits"
  				parameterType="Map"
  				resultType="ChatroomDto">
		SELECT C.CHATROOM_NO, C.CHATROOM_TITLE, C.CHATROOM_TYPE, C.CHATROOM_CREATED_DATE
		  FROM CHATROOM_T C INNER JOIN CHATROOM_PARTICIPATE_T P 
		    ON C.CHATROOM_NO = P.CHATROOM_NO
		 WHERE C.CHATROOM_TYPE = 'OneToOne' AND P.PARTICIPANT_NO IN (#{loginUserNo}, #{chatUserNo})
		 GROUP BY C.CHATROOM_NO, C.CHATROOM_TITLE, C.CHATROOM_TYPE, C.CHATROOM_CREATED_DATE
		 HAVING COUNT(*) = 2 
  </select>
  
  <!-- 1:1 채팅방 생성 - chatroom_t 삽입 -->
  <insert id="insertNewChatroom"
  				parameterType="ChatroomDto">
    <selectKey order="BEFORE" keyProperty="chatroomNo" resultType="int">
      SELECT CHATROOM_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>  	  				
		INSERT INTO CHATROOM_T (
				CHATROOM_NO, 
				CHATROOM_TITLE, 
				CHATROOM_TYPE, 
				CHATROOM_CREATED_DATE, 
				CREATOR_NO
		) VALUES (
				#{chatroomNo},
				#{chatroomTitle},
			  #{chatroomType},
				CURRENT_TIMESTAMP,
				#{creatorNo}
		)
  </insert>
  
  <!-- 1:1 채팅방 생성 - chatroom_participate_t 삽입 -->  
  <insert id="insertNewParticipate"
  				parameterType="ChatroomParticipateDto">
    <selectKey order="BEFORE" keyProperty="chatroomParticipateNo" resultType="int">
      SELECT CHATROOM_PARTICIPATE_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>  				
		INSERT INTO CHATROOM_PARTICIPATE_T (
		    CHATROOM_PARTICIPATE_NO,
		    CHATROOM_NO,
		    PARTICIPANT_NO,
		    PARTICIPATE_STATUS
		 ) VALUES (
		    #{chatroomParticipateNo},
		    #{chatroomNo},
		    #{participantNo},
		    0
     )
  </insert>
  
  <!-- 메시지 데이터 넣기 -->
  <insert id="insertChatMessage"
  				parameterType="MessageDto">
    <selectKey order="BEFORE" keyProperty="messageNo" resultType="int">
      SELECT MESSAGE_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>  	
			INSERT INTO MESSAGE_T (
					MESSAGE_NO,
					MESSAGE_TYPE, 
					MESSAGE_CONTENT, 
					SEND_DT, 
					CHATROOM_NO, 
					SENDER_NO
			) VALUES (
					#{messageNo}, 
					#{messageType}, 
					#{messageContent}, 
					CURRENT_TIMESTAMP, 
					#{chatroomNo}, 
					#{senderNo}
			)
  </insert>
  
  <!-- 메시지 읽음 여부 -->
  <insert id="insertMessageReadStatus"
  				parameterType="Map">
		INSERT INTO MESSAGE_READ_STATUS_T (
				MESSAGE_STATUS_NO,
				MESSAGE_NO,
				CHATROOM_NO,
				EMPLOYEE_NO,
				IS_READ
		) SELECT 
				MESSAGE_STATUS_SEQ.NEXTVAL,
		 		#{messageNo},
		 		CHATROOM_NO,
		 		PARTICIPANT_NO,
		 		'FALSE'
				FROM CHATROOM_PARTICIPATE_T
			 WHERE CHATROOM_NO = #{chatroomNo}
			 	 AND PARTICIPANT_NO IN
	       <foreach item="item" index="index" collection="offlineNoList" open="(" separator="," close=")">
	          #{item}
	       </foreach>
  </insert>  
  
  <!-- 채팅 내역 가져오기 -->
  <select id="getChatMessageList"
  				parameterType="Map"
  				resultType="MessageDto">
		SELECT MESSAGE_NO, MESSAGE_TYPE, MESSAGE_CONTENT, SEND_DT, CHATROOM_NO, SENDER_NO
	    FROM (SELECT ROW_NUMBER() OVER(ORDER BY SEND_DT DESC) AS RN, MESSAGE_NO, MESSAGE_TYPE, MESSAGE_CONTENT, SEND_DT, CHATROOM_NO, SENDER_NO
	          FROM MESSAGE_T
	         WHERE CHATROOM_NO = #{chatroomNo})
	 	 WHERE RN BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 채팅 게시글 개수 가져오기 -->
	<select id="getChatMessageCount">
	  SELECT COUNT(*)
		  FROM MESSAGE_T
		 WHERE CHATROOM_NO = #{chatroomNo}
	</select>
  
  <!-- 채팅 목록 가져오기 -->
  <select id="getChatList"
  				resultType="ChatroomDto">
		SELECT CHATROOM_NO, CHATROOM_TITLE, CHATROOM_TYPE, CHATROOM_CREATED_DATE
		  FROM CHATROOM_T
		 WHERE CHATROOM_NO IN (SELECT CHATROOM_NO
		          FROM CHATROOM_PARTICIPATE_T
		         WHERE PARTICIPANT_NO = #{employeeNo})
	</select>
	
	<!-- 채팅방 참여자 수 -->
	<select id="getChatroomParticipantCount"
					resultType="int">
		SELECT COUNT(*)
		  FROM CHATROOM_PARTICIPATE_T
		 WHERE CHATROOM_NO = #{chatroomNo}
	</select>
	
	<!-- 채팅방 참여자 번호 리스트 -->
	<select id="getChatroomParticipantList"
					resultType="ChatroomParticipateDto">
		SELECT CHATROOM_PARTICIPATE_NO, CHATROOM_NO, PARTICIPANT_NO, PARTICIPATE_STATUS
		  FROM CHATROOM_PARTICIPATE_T
		 WHERE CHATROOM_NO = #{chatroomNo}
	</select>
	
	
	<select id="getChatroomByChatroomNo"
					resultType="ChatroomDto">
		SELECT CHATROOM_NO, CHATROOM_TITLE, CHATROOM_TYPE, CHATROOM_CREATED_DATE, CREATOR_NO
		  FROM CHATROOM_T
		 WHERE CHATROOM_NO = #{chatroomNo}
	</select>
	
	<!-- 채팅방 참여자 상태 업데이트 -->
	<update id="updateParticipateStatus"
					parameterType="Map">
		UPDATE CHATROOM_PARTICIPATE_T
		   SET PARTICIPATE_STATUS = #{participateStatus}
		 WHERE CHATROOM_NO = #{chatroomNo}
		   AND PARTICIPANT_NO = #{participantNo, jdbcType=INTEGER}
	</update>
	
	<!-- 채팅방 참여자 삭제 -->
	<delete id="deleteParticipant"
					parameterType="Map">
		DELETE 
		  FROM CHATROOM_PARTICIPATE_T 
		 WHERE CHATROOM_NO = #{chatroomNo} 
		   AND PARTICIPANT_NO = #{participantNo}
	</delete>
	
	
	<!-- 채팅방 참여자가 0명인 채팅방 데이터 삭제 -->
	<delete id="deleteNoParticipateChatroom">
		DELETE
  		FROM CHATROOM_T
 		 WHERE CHATROOM_NO IN (SELECT C.CHATROOM_NO
		                         FROM CHATROOM_T C LEFT JOIN CHATROOM_PARTICIPATE_T P
		                           ON C.CHATROOM_NO = P.CHATROOM_NO
		                        GROUP BY C.CHATROOM_NO
		                       HAVING COUNT(P.PARTICIPANT_NO) = 0)
	</delete>
	
	<!-- 채팅방 참여자가 0명인 채팅방의 메시지 데이터 삭제 -->
  <delete id="deleteNoParticipateMessage">
	  DELETE
	    FROM MESSAGE_T
	   WHERE CHATROOM_NO IN (SELECT C.CHATROOM_NO
	                           FROM CHATROOM_T C LEFT JOIN CHATROOM_PARTICIPATE_T P
	                             ON C.CHATROOM_NO = P.CHATROOM_NO
	                          GROUP BY C.CHATROOM_NO
	                         HAVING COUNT(P.PARTICIPANT_NO) = 0)
  </delete>
  
  <!-- 채팅방 이름 수정 -->
  <update id="updateChatroomTitle"
  				parameterType="Map">
	  UPDATE CHATROOM_T
	     SET CHATROOM_TITLE = #{chatroomTitle}
	   WHERE CHATROOM_NO = #{chatroomNo}
  </update>
  
  
  <!-- 채팅방 별 ALL_READ가 0인 메시지 번호 및 읽음 카운트 - 처음 접속때 채팅 내역 가져오기-->
  <select id="getMessageReadCountByChatroomNo"
  				resultType="MessageReadStatusDto"
  				parameterType="Map">
		SELECT RNUM, MESSAGE_NO, UNREAD_COUNT
		FROM (
		    SELECT ROWNUM AS RNUM, MESSAGE_NO, UNREAD_COUNT
		    FROM (
		        SELECT M.MESSAGE_NO, COUNT(MRST.IS_READ) AS UNREAD_COUNT
		          FROM MESSAGE_T M JOIN MESSAGE_READ_STATUS_T MRST
		            ON M.MESSAGE_NO = MRST.MESSAGE_NO
		         WHERE M.ALL_READ = 0 AND M.CHATROOM_NO = #{chatroomNo} 
		                              AND MRST.IS_READ = 'FALSE'
		        GROUP BY M.MESSAGE_NO, M.SEND_DT
		        ORDER BY M.SEND_DT DESC
		    )
		)
		WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>
	
	
	
	<!-- 아래 두개는 한번에 실행 -->
	<!-- 채팅방 별로 내가 읽지 않은 메시지 번호 가져오기 -->
	<select id="getUnreadMessageNos"
					parameterType="Map"
					resultType="MessageReadStatusDto">
	    SELECT MESSAGE_NO
	    FROM MESSAGE_READ_STATUS_T
	    WHERE EMPLOYEE_NO = #{employeeNo} AND IS_READ = 'FALSE'
	    AND CHATROOM_NO = #{chatroomNo}
	</select>
	
	<!-- 읽지 않은 메시지들 업데이트 -->
	<update id="updateMessageReadStatus"
					parameterType="Map">
	    UPDATE MESSAGE_READ_STATUS_T
	    SET IS_READ = 'TRUE'
	    WHERE EMPLOYEE_NO = #{employeeNo} AND IS_READ = 'FALSE'
	    AND MESSAGE_NO IN
	    <foreach item="messageNo" collection="messageNos" open="(" separator="," close=")">
	        #{messageNo}
	    </foreach>
	</update>
	
	<!-- 메시지 번호 별 readCount 가져오기 -->
	<select id="getNewCountList"
					parameterType="Map"
					resultType="MessageReadStatusDto">
    SELECT m.MESSAGE_NO, 
           COALESCE(COUNT(mrs.MESSAGE_NO), 0) AS UNREAD_COUNT
      FROM MESSAGE_T m
           LEFT JOIN MESSAGE_READ_STATUS_T mrs 
           ON m.MESSAGE_NO = mrs.MESSAGE_NO 
           AND mrs.CHATROOM_NO = #{chatroomNo}
           AND mrs.IS_READ = 'FALSE'
     WHERE m.CHATROOM_NO = #{chatroomNo}
       AND m.MESSAGE_NO IN 
        <foreach item="messageNo" collection="messageNos" open="(" separator="," close=")">
            #{messageNo}
        </foreach>
     GROUP BY m.MESSAGE_NO
	</select>
	
	<update id="updateAllRead">
		UPDATE MESSAGE_T mt
		   SET ALL_READ = 1
		 WHERE EXISTS (
		    SELECT 1
		    FROM MESSAGE_READ_STATUS_T mrst
		    WHERE mrst.MESSAGE_NO = mt.MESSAGE_NO
		    GROUP BY mrst.MESSAGE_NO
		    HAVING COUNT(CASE WHEN mrst.IS_READ = 'FALSE' THEN 1 END) = 0
		)
	</update>
	
	<!-- ALL_READ가 1인 메시지 삭제 -->
	<delete id="deleteAlreadyRead">
		DELETE
		  FROM MESSAGE_READ_STATUS_T
		 WHERE MESSAGE_NO IN (SELECT MESSAGE_NO
		                       FROM MESSAGE_T
		                      WHERE ALL_READ = 1)
	</delete>
  
  
  
  
  
  

</mapper>